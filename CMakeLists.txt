cmake_minimum_required(VERSION 3.3)

set (BASE_LLVM_VERSION 13.0.0)
set(LLVM_SPIRV_VERSION ${BASE_LLVM_VERSION}.0)

option(LLVM_SPIRV_INCLUDE_TESTS
  "Generate build targets for the llvm-spirv lit tests."
  ${LLVM_INCLUDE_TESTS})

if (NOT DEFINED LLVM_SPIRV_BUILD_EXTERNAL)
  # check if we build inside llvm or not
  if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    set(LLVM_SPIRV_BUILD_EXTERNAL YES)
  endif(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
endif (NOT DEFINED LLVM_SPIRV_BUILD_EXTERNAL)

option(LLVM_SPIRV_BUILD_EXTERNAL "we build inside llvm or not" "${LLVM_SPIRV_BUILD_EXTERNAL}")
if(LLVM_SPIRV_BUILD_EXTERNAL)
  project(LLVM_SPIRV
    VERSION
      ${LLVM_SPIRV_VERSION}
    LANGUAGES
      CXX
      C
  )

  set(CMAKE_CXX_STANDARD 14)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)

  if(LLVM_SPIRV_INCLUDE_TESTS)
    set(LLVM_TEST_COMPONENTS
      llvm-as
      llvm-dis
    )
  endif(LLVM_SPIRV_INCLUDE_TESTS)

  find_package(LLVM ${BASE_LLVM_VERSION} REQUIRED
    COMPONENTS
      Analysis
      BitReader
      BitWriter
      Core
      Support
      TransformUtils
      ${LLVM_TEST_COMPONENTS}
  )
  set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${LLVM_CMAKE_DIR}
  )
  include(AddLLVM)
  include(HandleLLVMOptions)

  message(STATUS "Found LLVM: ${LLVM_VERSION}")

  option(CCACHE_ALLOWED "allow use of ccache" TRUE)
  find_program(CCACHE_EXE_FOUND ccache)
  if(CCACHE_EXE_FOUND AND CCACHE_ALLOWED)
    message(STATUS "Found ccache: ${CCACHE_EXE_FOUND}")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
  endif()
endif()

set(LLVM_SPIRV_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include)

add_subdirectory(lib/SPIRV)
add_subdirectory(tools/llvm-spirv)
if(LLVM_SPIRV_INCLUDE_TESTS)
  add_subdirectory(test)
endif(LLVM_SPIRV_INCLUDE_TESTS)

install(
  FILES
    ${LLVM_SPIRV_INCLUDE_DIRS}/LLVMSPIRVLib.h
    ${LLVM_SPIRV_INCLUDE_DIRS}/LLVMSPIRVOpts.h
    ${LLVM_SPIRV_INCLUDE_DIRS}/LLVMSPIRVExtensions.inc
  DESTINATION
    ${CMAKE_INSTALL_PREFIX}/include/LLVMSPIRVLib
  COMPONENT "LLVMSPIRVLib-dev"
)

configure_file(LLVMSPIRVLib.pc.in ${CMAKE_BINARY_DIR}/LLVMSPIRVLib.pc @ONLY)
install(
  FILES
    ${CMAKE_BINARY_DIR}/LLVMSPIRVLib.pc
  DESTINATION
    ${CMAKE_INSTALL_PREFIX}/lib${LLVM_LIBDIR_SUFFIX}/pkgconfig
  COMPONENT "LLVMSPIRVLib-dev"
)

if(LLVM_SPIRV_BUILD_EXTERNAL)
  include(CPackComponent)
  set(CPACK_PACKAGE_NAME "llvm-spirv")
  set(CPACK_PACKAGE_VENDOR "The Khronos Group")
  set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/CPack.${CPACK_PACKAGE_NAME}.description.txt")  # https://gitlab.kitware.com/cmake/cmake/-/merge_requests/4806
  set(CPACK_PACKAGE_HOMEPAGE_URL "https://github.com/KhronosGroup/SPIRV-LLVM-Translator")
  set(CPACK_PACKAGE_CONTACT "https://github.com/KhronosGroup/SPIRV-LLVM-Translator")
  set(CPACK_PACKAGE_CHECKSUM "SHA512")
  set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE.TXT")
  set(CPACK_DEBIAN_PACKAGE_VERSION "${LLVM_VERSION}-${LLVM_SPIRV_VERSION}") #  in Ubuntu version of llvm is used as version
  set(CPACK_GENERATOR "DEB")
  
  set(CPACK_DEBIAN_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
  set(CPACK_DEBIAN_LLVMSPIRVLIB_PACKAGE_NAME "${CPACK_DEBIAN_PACKAGE_NAME}")
  set(CPACK_DEBIAN_LLVMSPIRVLIB_PACKAGE_PROVIDES "libllvmspirvlib${LLVM_VERSION_MAJOR}")
  set(CPACK_DEBIAN_LLVMSPIRVLIB_PACKAGE_REPLACES "libllvmspirvlib${LLVM_VERSION_MAJOR}")

  string(REPLACE "." ";" LLVM_VERSION_PARSED "${LLVM_VERSION}")
  list(GET LLVM_VERSION_PARSED 0 LLVM_VERSION_MAJOR)
  list(GET LLVM_VERSION_PARSED 1 LLVM_VERSION_MINOR)

  set(CPACK_DEBIAN_LLVMSPIRVLIB-DEV_PACKAGE_NAME "${CPACK_DEBIAN_LLVMSPIRVLIB_PACKAGE_NAME}-dev")
   
  
  set(CPACK_DEBIAN_PACKAGE_DEPENDS "libllvm${LLVM_VERSION_MAJOR} (>= ${LLVM_VERSION_MAJOR}), libc6, ${CPACK_DEBIAN_LLVMSPIRVLIB_PACKAGE_NAME} (>=${CPACK_DEBIAN_PACKAGE_VERSION})")
  set(CPACK_DEBIAN_LLVMSPIRVLIB-DEV_PACKAGE_PROVIDES "libllvmspirvlib-dev")
  set(CPACK_DEBIAN_LLVMSPIRVLIB-DEV_PACKAGE_REPLACES "libllvmspirvlib-dev")

  include(CPack)
endif()
